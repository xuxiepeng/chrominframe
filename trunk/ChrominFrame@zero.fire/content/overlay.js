// bind for function return a refer to methodFunction.prototype.bind = function(obj) {	var method = this,	temp = function() {		return method.apply(obj, arguments);	};	return temp;}// hook a target functionFunction.prototype.hook = function(source, target, meth) {	target._hookMeth = meth;	target._hooker = source;	source['_hook'+meth] = this;	source['_orig'+meth] = target[meth];	target[meth] = function() {		this._hooker['_orig'+this._hookMeth].apply(this,arguments);		this._hooker['_hook'+this._hookMeth].apply(this,arguments);	}}var gChrominFrame = new function() {//(* Event listen and unlisten	this.listenToEvent = function(source, event, method, opt_capture) {		if (!gChrominFrame[method]) {			throw "method '" + method + "' does not exist on object '" + gChrominFrame + "'";		}		var listener = gChrominFrame[method].bind(gChrominFrame)		Components.lookupMethod(source, "addEventListener").apply(source, [event, listener, opt_capture]);	}	this.unlistenToEvent = function(source, event, method, opt_capture) {		if (!gChrominFrame[method]) {			throw "method '" + method + "' does not exist on object '" + gChrominFrame + "'";		}		var listener = gChrominFrame[method].bind(gChrominFrame)		Components.lookupMethod(source, "removeEventListener").apply(source, [event, listener, opt_capture]);	}//*)	var getComputedStyle = function(element, pseudoElt, Property) {		return document.defaultView.getComputedStyle(element,pseudoElt).getPropertyValue(Property);	}		var $ = function(id) {return document.getElementById(id);}	this.PREF = 'extensions.chrominframe.';	var ChromeTitle = null;	var TabBrowser = null;	this.OnLoad = function(e) {		TabBrowser = getBrowser(); // tabbrowser#content		ChromeTitle = $("chromeTitle");		this.updateTitlebar.hook(this, TabBrowser, 'updateTitlebar');		this.FullScreenToggle.hook(this, FullScreen, 'toggle');		// fix 3.1b2 last-tab error		//if (ffversion.indexOf('3.1b') >= 0) {				this.listenToEvent(TabBrowser.mTabContainer, "DOMNodeInserted", "OnNewTab");				this.listenToEvent(TabBrowser.mTabContainer, "DOMNodeRemoved", "OnCloseTab");		//}				window.setTimeout(this.delayedStartup.bind(this), 0);	}	this.delayedStartup = function() {		// cleaning		if (gPrefService.prefHasUserValue("ChrominFrame.window.persist"))			gPrefService.clearUserPref("ChrominFrame.window.persist");		if (gPrefService.prefHasUserValue(this.PREF+'persist')) {			var persist = gPrefService.getCharPref(this.PREF+'persist');			if (persist.length>0) {				var persistList = persist.split(' ');				window.curX = persistList[0];				window.curY = persistList[1];				window.curWidth = persistList[2];				window.curHeight= persistList[3];				window.moveTo(window.screen.availLeft, window.screen.availTop);				window.resizeTo(window.screen.availWidth, window.screen.availHeight);				$("main-window").setAttribute('chromestate', 'maximized');			}		}				// fix find-bar color		var FindToolbar = document.getElementById('FindToolbar');		if ('transparent' == getComputedStyle(FindToolbar,null,'background-color'))			FindToolbar.style.backgroundColor = 			getComputedStyle($('main-window'),null,'background-color');	}		this.Maximize = function() {		document.documentElement.setAttribute("width", 800);		document.documentElement.setAttribute("height", 600);		var chrome = document.getElementById("main-window");		if (chrome.getAttribute("chromestate") == "maximized") {				chrome.setAttribute("chromestate", "normal");				window.moveTo(window.curX, window.curY);				window.resizeTo(window.curWidth, window.curHeight);				gPrefService.setCharPref(gChrominFrame.PREF+'persist', '');		}else{				window.curWidth = window.outerWidth;				window.curHeight= window.outerHeight;				window.curX = screenX;				window.curY = screenY;				window.moveTo(window.screen.availLeft, window.screen.availTop);				window.resizeTo(window.screen.availWidth, window.screen.availHeight);				chrome.setAttribute("chromestate", "maximized");				gPrefService.setCharPref(gChrominFrame.PREF+'persist',					window.curX+' '+window.curY+' '+window.curWidth+' '+window.curHeight);		}	}	this.updateTitlebar = function() {		ChromeTitle.value = this.ownerDocument.title;	}//(* fullscreen animation	this.FullScreenToggle = function() {		var fullScrToggler = $("fullscr-toggler");		var chromeTitleBox = $("chrome-title-box");		if (!window.fullScreen) {			gChrominFrame.listenToEvent(fullScrToggler, 'DOMAttrModified', 'mouseoverToggle');			TabBrowser.mStrip.setAttribute('moz-collapsed', true);			chromeTitleBox.setAttribute('height',20);		} else {			gChrominFrame.unlistenToEvent(fullScrToggler, 'DOMAttrModified', 'mouseoverToggle');			chromeTitleBox.removeAttribute('moz-collapsed');			TabBrowser.mStrip.removeAttribute('moz-collapsed');			chromeTitleBox.removeAttribute('height');		}	}	this.mouseoverToggle = function(e) {		if (e.attrName == "moz-collapsed") {			$("chrome-title-box").setAttribute(e.attrName, e.prevValue);			$("chrome-title-box").removeAttribute('height');		}	}//*)//(* fix 3.1b2 last-tab error	this.LineupTabs = function() {		var tabs = TabBrowser.mTabs;		tabs[0].setAttribute('first-tab','true');		tabs[tabs.length-1].setAttribute('last-tab','true');		for (var i=0; i<tabs.length; i++) {			if ((i < tabs.length -1) && (tabs[i].hasAttribute('last-tab'))) {				tabs[i].removeAttribute('last-tab');			}			if ((i > 0) && (tabs[i].hasAttribute('first-tab'))) {				tabs[i].removeAttribute('first-tab');			}		}		}		this.OnNewTab = function(e) {		gChrominFrame.LineupTabs();	}	this.OnCloseTab = function(e) {		gChrominFrame.LineupTabs();	}//*)}gChrominFrame.listenToEvent(window, "load", 'OnLoad');