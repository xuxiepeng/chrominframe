var gChrominFrame = new function() {//(* define local variables	// bind for function return a refer to method	var bind = function(method, obj) {		var temp = function() {			return method.apply(obj, arguments);		};		return temp;	}	// hijack method of given object	var hook = function(objName, method) {		var obj = eval(objName);		obj._hooking = method;		gChrominFrame['_orig'+method] = obj[method];		gChrominFrame['_hook'+method] = gChrominFrame[objName+'_'+method];		obj[method] = function() {			gChrominFrame['_orig'+this._hooking].apply(this,arguments);			gChrominFrame['_hook'+this._hooking].apply(this,arguments);		}	}	// short way to get element by id	var $ = function(id) {return document.getElementById(id);}	// get computed style for an element	var getComputedStyle = function(element, pseudoElt, Property) {		return document.defaultView.getComputedStyle(element,pseudoElt).getPropertyValue(Property);	}	// vars	var TabBrowser = null;// ends define local variables//*)//(* Event listen and unlisten	this.listenToEvent = function(source, event, method, opt_capture) {		if (!gChrominFrame[method]) {			throw "method '" + method + "' does not exist on object '" + gChrominFrame + "'";		}		var listener = bind(gChrominFrame[method], gChrominFrame);		Components.lookupMethod(source, "addEventListener").apply(source, [event, listener, opt_capture]);	}	this.unlistenToEvent = function(source, event, method, opt_capture) {		if (!gChrominFrame[method]) {			throw "method '" + method + "' does not exist on object '" + gChrominFrame + "'";		}		var listener = bind(gChrominFrame[method], gChrominFrame);		Components.lookupMethod(source, "removeEventListener").apply(source, [event, listener, opt_capture]);	}//*)	this.PREF = 'extensions.chrominframe.';	this.OnLoad = function(e) {		TabBrowser = getBrowser(); // tabbrowser#content		hook('TabBrowser', 'updateTitlebar');		hook('FullScreen', 'toggle');		// fix 3.1b2 last-tab error		//if (ffversion.indexOf('3.1b') >= 0) {				this.listenToEvent(TabBrowser.mTabContainer, "DOMNodeInserted", "OnNewTab");				this.listenToEvent(TabBrowser.mTabContainer, "DOMNodeRemoved", "OnCloseTab");		//}				this.listenToEvent(TabBrowser.mTabContainer, "DOMAttrModified", "OnCollapseTab");				window.setTimeout(bind(this.delayedStartup,this), 0);	}	this.delayedStartup = function() {		// cleaning		if (gPrefService.prefHasUserValue("ChrominFrame.window.persist"))			gPrefService.clearUserPref("ChrominFrame.window.persist");    // maximize if has saved state		if (gPrefService.prefHasUserValue(this.PREF+'persist')) {			var persist = gPrefService.getCharPref(this.PREF+'persist');			if (persist.length>0) {				window.moveTo(window.screen.availLeft, window.screen.availTop);				window.resizeTo(window.screen.availWidth, window.screen.availHeight);				$("main-window").setAttribute('chromestate', 'maximized');			}		}			}		this.Maximize = function() {		if (gChrominFrame._inFullScreen) {			gChrominFrame._shouldNormalize = false;			window.fullScreen = !window.fullScreen;		}		var chrome = $("main-window");		if (chrome.getAttribute("chromestate") == "maximized") {			chrome.setAttribute("chromestate", "normal");			var persist = gPrefService.getCharPref(gChrominFrame.PREF+'persist');			if (persist.length>0) {				var persistList = persist.split(' ');				window.moveTo(persistList[0], persistList[1]);				window.resizeTo(persistList[2], persistList[3]);				gPrefService.setCharPref(gChrominFrame.PREF+'persist', '');			}		}else{			gPrefService.setCharPref(gChrominFrame.PREF+'persist',				window.screenX+' '+window.screenY+' '+window.outerWidth+' '+window.outerHeight);			chrome.setAttribute("chromestate", "maximized");			window.moveTo(window.screen.availLeft, window.screen.availTop);			window.resizeTo(window.screen.availWidth, window.screen.availHeight);		}	}	this.TabBrowser_updateTitlebar = function() {		$("chromeTitle").value = this.ownerDocument.title;	}//(* fullscreen animation	this.FullScreen_toggle = function() {		var fullScrToggler = $("fullscr-toggler");		var chromeTitleBox = $("chrome-title-box");		if (!window.fullScreen) {			gChrominFrame.listenToEvent(fullScrToggler, 'DOMAttrModified', 'mouseoverToggle');			TabBrowser.mStrip.setAttribute('moz-collapsed', true);			if ($('main-window').getAttribute('chromestate') != 'maximized') {				$('main-window').setAttribute("chromestate", "maximized");				gPrefService.setCharPref(gChrominFrame.PREF+'persist',					window.screenX+' '+window.screenY+' '+window.outerWidth+' '+window.outerHeight);				gChrominFrame._shouldNormalize = true;			}			gChrominFrame._inFullScreen = true;		} else {			gChrominFrame.unlistenToEvent(fullScrToggler, 'DOMAttrModified', 'mouseoverToggle');			chromeTitleBox.removeAttribute('moz-collapsed');			TabBrowser.mStrip.removeAttribute('moz-collapsed');			gChrominFrame._inFullScreen = false;			if (gChrominFrame._shouldNormalize) {				$('main-window').setAttribute("chromestate", "normal");				gPrefService.setCharPref(gChrominFrame.PREF+'persist', '');				gChrominFrame._shouldNormalize = false;			}		}	}	this.mouseoverToggle = function(e) {		if (e.attrName == "moz-collapsed") {			$("chrome-title-box").setAttribute(e.attrName, e.prevValue);		}	}//*)//(* fix 3.1b2 last-tab error  /*    Params      target:  the changed tab      mode:    0 for remove, 1 for insert  */	this.LineupTabs = function(target, mode) {		var tabs = TabBrowser.mTabs;    var firstid = 0;    var lastid = tabs.length - 1;    if (mode == 0) {      if (tabs[firstid] == target)        firstid = firstid + 1;      if (tabs[lastid] == target)        lastid = lastid - 1;    }    tabs[firstid].setAttribute('first-tab','true');    tabs[lastid].setAttribute('last-tab','true');		for (var i=0; i<tabs.length; i++) {			if ((i < lastid) && (tabs[i].hasAttribute('last-tab'))) {				tabs[i].removeAttribute('last-tab');			}			if ((i > firstid) && (tabs[i].hasAttribute('first-tab'))) {				tabs[i].removeAttribute('first-tab');			}		}	}		this.OnNewTab = function(e) {		gChrominFrame.LineupTabs(e.target, 1);	}	this.OnCloseTab = function(e) {		gChrominFrame.LineupTabs(e.target, 0);	}//*)	this.OnCollapseTab = function(e) {		if (e.attrName == "collapsed") {			var tabs = TabBrowser.mTabs;			var index = e.target.tabIndex;			if (e.newValue == "true") {				tabs[index+1].setAttribute('first-visible-tab','true');				for (var i=0; i<index+1; i++) {					tabs[i].removeAttribute('first-visible-tab');				}							} else {				tabs[index].setAttribute('first-visible-tab','true');				tabs[index+1].removeAttribute('first-visible-tab');			}		}	}}gChrominFrame.listenToEvent(window, 'load', 'OnLoad');