var gChrominFrame = new function() {//(* define local variables	// bind for function return a refer to method	var bind = function(method, obj) {		var temp = function() {			return method.apply(obj, arguments);		};		return temp;	}	// hijack method of given object	var hook = function(objName, method) {		var obj = eval(objName);		obj._hooking = method;		gChrominFrame['_orig'+method] = obj[method];		gChrominFrame['_hook'+method] = gChrominFrame[objName+'_'+method];		obj[method] = function() {			gChrominFrame['_orig'+this._hooking].apply(this,arguments);			gChrominFrame['_hook'+this._hooking].apply(this,arguments);		}	}	// short way to get element by id	var $ = function(id) {return document.getElementById(id);}	// get computed style for an element	var getComputedStyle = function(element, pseudoElt, Property) {		return document.defaultView.getComputedStyle(element,pseudoElt).getPropertyValue(Property);	}	// vars	var		Cc = Components.classes,		Ci = Components.interfaces,		Os = Cc["@mozilla.org/observer-service;1"].getService(Ci.nsIObserverService),		Sm = Cc["@mozilla.org/gfx/screenmanager;1"].getService(Ci.nsIScreenManager);	var		TabBrowser = null;// ends define local variables//*)//(* for window resize, also works on dual monitor	var isInSecondScreen = function() {		if (Sm.numberOfScreens == 2) {			var centerX = window.screenX + window.outerWidth/2;			if (centerX > screen.width) {				return true;			}		}		return false;	}		var getAvailScreenRect = function() {		var left,top,width,height;		var l = {}, t = {}, w = {}, h = {};				var currentScreen = Sm.primaryScreen;		if (isInSecondScreen()) {			currentScreen = Sm.screenForRect(				window.screenX + window.outerWidth/2,				window.screenY + window.outerHeight/2,				10,10);		}				currentScreen.GetAvailRect(l,t,w,h);		left = l.value;top = t.value;width = w.value;height = h.value;				return [left, top, width, height];	}		var ensureWindowInScreen = function() {		var mxW,mxH;		var l = {}, t = {}, w = {}, h = {};		Sm.primaryScreen.GetRect(l,t,w,h);		mxW = w.value;mxH = h.value;		if (Sm.numberOfScreens == 2) {			var secondScreen = Sm.screenForRect(mxW + 2,2,10,10);			secondScreen.GetRect(l,t,w,h);			mxW = mxW + w.value;		}		if (window.screenX >= mxW) { //totally out of screen!			window.moveTo(screen.availLeft, screen.availTop);		}		if ($('main-window').getAttribute("chromestate") == "maximized"){			//when maximized, user can't move the window. make sure the right edge of window is in screen			if (window.screenX + window.outerWidth > mxW) {				window.resizeTo(screen.availWidth, screen.availHeight);			}		}	}	// resize window to given rectangular	var setWindowRect = function(rect) {		window.resizeTo(rect[2], rect[3]);		window.moveTo(rect[0], rect[1]);	}	// ends for window resize//*)//(* Event listen and unlisten	this.listenToEvent = function(source, event, method, opt_capture) {		if (!gChrominFrame[method]) {			throw "method '" + method + "' does not exist on object '" + gChrominFrame + "'";		}		var listener = bind(gChrominFrame[method], gChrominFrame);		Components.lookupMethod(source, "addEventListener").apply(source, [event, listener, opt_capture]);	}	this.unlistenToEvent = function(source, event, method, opt_capture) {		if (!gChrominFrame[method]) {			throw "method '" + method + "' does not exist on object '" + gChrominFrame + "'";		}		var listener = bind(gChrominFrame[method], gChrominFrame);		Components.lookupMethod(source, "removeEventListener").apply(source, [event, listener, opt_capture]);	}//*)	this.PREF = 'extensions.chrominframe.';	this.OnLoad = function(e) {		TabBrowser = getBrowser(); // tabbrowser#content		hook('TabBrowser', 'updateTitlebar');		hook('FullScreen', 'toggle');		// fix 3.1b2 last-tab error		//if (ffversion.indexOf('3.1b') >= 0) {				//this.listenToEvent(TabBrowser.mTabContainer, "DOMNodeInserted", "OnNewTab");				//this.listenToEvent(TabBrowser.mTabContainer, "DOMNodeRemoved", "OnCloseTab");				this.listenToEvent(TabBrowser.mTabContainer, "TabOpen", "OnNewTab");				this.listenToEvent(TabBrowser.mTabContainer, "TabClose", "OnCloseTab");		//}				//this.listenToEvent(TabBrowser.mTabContainer, "DOMAttrModified", "OnCollapseTab");				window.setTimeout(this.restoreChromeState, 0);				//Os.addObserver(CF_SessionRestoredObserver, "sessionstore-windows-restored", false);	}/*	const CF_SessionRestoredObserver = {		observe: function(subject, topic, data)		{			Os.removeObserver(CF_SessionRestoredObserver, "sessionstore-windows-restored");			gChrominFrame.restoreChromeState();		}	}*/	this.restoreChromeState = function() {		// cleaning (there is no need to ...)		//if (gPrefService.prefHasUserValue("ChrominFrame.window.persist"))		//	gPrefService.clearUserPref("ChrominFrame.window.persist");		// maximize if has saved state		if (gPrefService.prefHasUserValue(gChrominFrame.PREF+'persist')) {			var persist = gPrefService.getCharPref(gChrominFrame.PREF+'persist');			if (persist.length>0) {				$("main-window").setAttribute('chromestate', 'maximized');				setWindowRect(getAvailScreenRect());			}		}		ensureWindowInScreen();	}		this.Maximize = function() {		if (gChrominFrame._inFullScreen) {			gChrominFrame._shouldNormalize = false;			window.fullScreen = !window.fullScreen;		}		var chrome = $("main-window");		if (chrome.getAttribute("chromestate") == "maximized") {			chrome.setAttribute("chromestate", "normal");			var persist = gPrefService.getCharPref(gChrominFrame.PREF+'persist');			if (persist.length>0) { //restore				setWindowRect(persist.split(' '));				gPrefService.setCharPref(gChrominFrame.PREF+'persist', '');			}		}else{ //maximize			gPrefService.setCharPref(gChrominFrame.PREF+'persist',				window.screenX+' '+window.screenY+' '+window.outerWidth+' '+window.outerHeight);			chrome.setAttribute("chromestate", "maximized");			setWindowRect(getAvailScreenRect());		}		ensureWindowInScreen();	}	this.TabBrowser_updateTitlebar = function() {		$("chromeTitle").value = this.ownerDocument.title;	}//(* fullscreen animation	this.FullScreen_toggle = function() {		var fullScrToggler = $("fullscr-toggler");		var chromeTitleBox = $("chrome-title-box");		if (!window.fullScreen) {			gChrominFrame.listenToEvent(fullScrToggler, 'DOMAttrModified', 'mouseoverToggle');			TabBrowser.mStrip.setAttribute('moz-collapsed', true);			if ($('main-window').getAttribute('chromestate') != 'maximized') {				$('main-window').setAttribute("chromestate", "maximized");				gPrefService.setCharPref(gChrominFrame.PREF+'persist',					window.screenX+' '+window.screenY+' '+window.outerWidth+' '+window.outerHeight);				gChrominFrame._shouldNormalize = true;			}			gChrominFrame._inFullScreen = true;		} else {			gChrominFrame.unlistenToEvent(fullScrToggler, 'DOMAttrModified', 'mouseoverToggle');			chromeTitleBox.removeAttribute('moz-collapsed');			TabBrowser.mStrip.removeAttribute('moz-collapsed');			gChrominFrame._inFullScreen = false;			if (gChrominFrame._shouldNormalize) {				$('main-window').setAttribute("chromestate", "normal");				gPrefService.setCharPref(gChrominFrame.PREF+'persist', '');				gChrominFrame._shouldNormalize = false;			}		}	}	this.mouseoverToggle = function(e) {		if (e.attrName == "moz-collapsed") {			$("chrome-title-box").setAttribute(e.attrName, e.prevValue);		}	}//*)//(* fix 3.1b2 last-tab error	/*		Params			target:	the changed tab			mode:		0 for remove, 1 for insert	*/	this.LineupTabs = function(target, mode) {		var tabs = TabBrowser.mTabs;		var firstid = 0;		var lastid = tabs.length - 1;		if (mode == 0) {			if (tabs[firstid] == target)				firstid = firstid + 1;			if (tabs[lastid] == target)				lastid = lastid - 1;		}		tabs[firstid].setAttribute('first-tab','true');		tabs[lastid].setAttribute('last-tab','true');		for (var i=0; i<tabs.length; i++) {			if ((i < lastid) && (tabs[i].hasAttribute('last-tab'))) {				tabs[i].removeAttribute('last-tab');			}			if ((i > firstid) && (tabs[i].hasAttribute('first-tab'))) {				tabs[i].removeAttribute('first-tab');			}		}	}		this.OnNewTab = function(e) {		gChrominFrame.LineupTabs(e.target, 1);	}	this.OnCloseTab = function(e) {		gChrominFrame.LineupTabs(e.target, 0);	}//*)/*	this.OnCollapseTab = function(e) {		if (e.attrName == "collapsed") {			var tabs = TabBrowser.mTabs;			var index = e.target.tabIndex;			if (e.newValue == "true") {				tabs[index+1].setAttribute('first-visible-tab','true');				for (var i=0; i<index+1; i++) {					tabs[i].removeAttribute('first-visible-tab');				}							} else {				tabs[index].setAttribute('first-visible-tab','true');				tabs[index+1].removeAttribute('first-visible-tab');			}		}	}*/}gChrominFrame.listenToEvent(window, 'load', 'OnLoad', false);